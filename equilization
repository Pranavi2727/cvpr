import cv2 
import numpy as np 
import matplotlib.pyplot as plt 
# Load the image in color 
image_path = r"C:\Users\91984\OneDrive\Desktop\5E4\image1.jpg" 
image = cv2.imread(image_path) 
# Check if image is loaded correctly 
if image is None: 
    print("Error loading image!") 
    exit() 
#Convert from BGR to YCrCb color space 
ycrcb = cv2.cvtColor(image, cv2.COLOR_BGR2YCrCb) 
#Extract the Y (luminance) channel 
y_channel = ycrcb[:, :, 0] 
 

#Compute histogram before equalization 
hist_before = cv2.calcHist([y_channel], [0], None, [256], [0, 256]) 
#Apply histogram equalization on the Y channel 
ycrcb[:, :, 0] = cv2.equalizeHist(y_channel) 
# Compute histogram after equalization 
hist_after = cv2.calcHist([ycrcb[:, :, 0]], [0], None, [256], [0, 256]) 
#Convert back to BGR color space 
equalized_image = cv2.cvtColor(ycrcb, cv2.COLOR_YCrCb2BGR) 
#Display results 
plt.figure(figsize=(12, 6)) 
# Original Image 
plt.subplot(2, 2, 1) 
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) 
plt.title("Original Image") 
plt.axis("off") 
# Histogram Before Equalization 
plt.subplot(2, 2, 2) 
plt.plot(hist_before, color='black') 
plt.title("Histogram (Before Equalization)") 
plt.xlabel("Pixel Intensity") 
plt.ylabel("Frequency") 
# Equalized Image 
plt.subplot(2, 2, 3) 
plt.imshow(cv2.cvtColor(equalized_image, cv2.COLOR_BGR2RGB)) 
plt.title("Equalized Image") 

plt.axis("off") 
# Histogram After Equalization 
plt.subplot(2, 2, 4) 
plt.plot(hist_after, color='black') 
plt.title("Histogram (After Equalization)") 
plt.xlabel("Pixel Intensity") 
plt.ylabel("Frequency") 
plt.tight_layout() 
plt.show() 
# Save the equalized image 
cv2.imwrite(r"C:\Users\91984\OneDrive\Desktop\5E4\equalized_color_image.jpg", 
equalized_image) 
