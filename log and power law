import cv2 
import numpy as np 
# Load the image in color 
image_path = r"C:\Users\91984\OneDrive\Desktop\5E4\image1.jpg" 
image = cv2.imread(image_path, cv2.IMREAD_COLOR)  # Read in BGR format 
# Convert image to float to prevent overflow 
image_float = image.astype(np.float32) 
# Apply log transformation to each channel separately 
c = 255 / np.log(1 + np.max(image_float))  # Compute scaling factor 
log_transformed = c * np.log(1 + image_float) 
# Normalize values to range 0-255 
log_transformed = np.clip(log_transformed, 0, 255).astype(np.uint8) 
# Display and save the results 
cv2.imshow('Original Image', image) 
cv2.imshow('Log Transformed Image', log_transformed) 
cv2.imwrite(r"C:\Users\91984\OneDrive\Desktop\5E4\log_transformed_color.jpg", 
log_transformed) 
cv2.waitKey(0) 
cv2.destroyAllWindows() 


POWER LAW
import cv2 
import numpy as np 
 
# Load the image in color 
image_path = r"C:\Users\91984\OneDrive\Desktop\5E4\image1.jpg" 
image = cv2.imread(image_path, cv2.IMREAD_COLOR)  # Read in BGR format 
 
# Convert image to float for processing 
image_float = image.astype(np.float32) 
 
# Apply gamma correction to each channel separately 

gamma = 2.0  # Change gamma value for different effects 
c = 255 / (255 ** gamma)  # Compute scaling factor 
gamma_transformed = c * (image_float ** gamma) 
 
# Normalize values to range 0-255 
gamma_transformed = np.clip(gamma_transformed, 0, 255).astype(np.uint8) 
# Display and save the results 
cv2.imshow('Original Image', image) 
cv2.imshow('Gamma Transformed Image', gamma_transformed) 
cv2.imwrite(r"C:\Users\91984\OneDrive\Desktop\5E4\gamma_transformed_color.jpg", 
gamma_transformed) 
cv2.waitKey(0) 
cv2.destroyAllWindows()
