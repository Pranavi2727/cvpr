import cv2 
import numpy as np 
# Define the image path 
image_path = r"C:\Users\91984\OneDrive\Desktop\5E4\image1.jpg" 
# Read the image 
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE) 
 
# Apply negative transformation 
negative_image = 255 - image 
# Display and save the result 
cv2.imshow('Original Image', image) 
cv2.imshow('Negative Image', negative_image) 
cv2.imwrite(r"C:\Users\91984\OneDrive\Desktop\5E4\negative_image.jpg", 
negative_image) 
 
cv2.waitKey(0) 
cv2.destroyAllWindows()



PIECEWISE
import cv2 
import numpy as np 
def piecewise_linear_transformation(image, r1, s1, r2, s2): 
    output = np.zeros_like(image, dtype=np.uint8) 
    for channel in range(3):  # Process each color channel separately (B, G, R) 
        for i in range(image.shape[0]): 
            for j in range(image.shape[1]): 
                r = image[i, j, channel] 
                if r < r1: 
                    output[i, j, channel] = (s1 / r1) * r 
                elif r1 <= r < r2: 
                    output[i, j, channel] = ((s2 - s1) / (r2 - r1)) * (r - r1) + s1 
                else: 
                    output[i, j, channel] = ((255 - s2) / (255 - r2)) * (r - r2) + s2 
    return output 
# Define the image path 
image_path = r"C:\Users\91984\OneDrive\Desktop\5E4\image1.jpg" 
# Read the image in color 
image = cv2.imread(image_path, cv2.IMREAD_COLOR) 
# Define transformation parameters 
r1, s1, r2, s2 = 50, 10, 150, 240 
# Apply piecewise linear transformation to the color image 
transformed_image = piecewise_linear_transformation(image, r1, s1, r2, s2) 
# Display and save the result 
cv2.imshow('Original Image', image) 
cv2.imshow('Piecewise Linear Transformed Image', transformed_image) 
cv2.imwrite(r"C:\Users\91984\OneDrive\Desktop\5E4\piecewise_transformed.jpg", 
transformed_image) 
cv2.waitKey(0) 
cv2.destroyAllWindows()
